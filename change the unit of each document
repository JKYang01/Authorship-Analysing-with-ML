import pandas as pd 

df_JJ = pd.read_csv(r"C:\Users\wangtao\Desktop\data_RC.csv")
print(df_JJ.head())

text_JJ = df_JJ['text']
graph_JJ = []
for line in text_JJ:
    graph_JJ.append(line) 

# test the data that have appended
print(graph_JJ[0])
print(len(graph_JJ)) 


## 将 graph_JJ 列表中的元素以五十句为一组 编辑一个函数 运用zip(*(iter(init_list),)*children_list_len)
## 将原先的列表下分解成 五十句一组的小列表 
## 关于python3 zip()方法 http://www.runoob.com/python3/python3-func-zip.html
#  iter() 方法 https://www.jianshu.com/p/dcf83643deeb  
#  init_list为初始化的列表 chilren_list_len 初始化列表中小列表元素数目
#  zip(*iterables)As arguments, it can take iterables.
#  These can be built-in like the list, string, dict, and user-defined (objects with the __iter__ method).

def list_of_sentences(init_list, children_list_len):
    list_of_sentence = zip(*(iter(init_list),)*children_list_len) 
    end_list = [list(i) for i in list_of_sentence]         # list() 方法 将 tuple 元组转化为 list
    
    n = len(init_list)% children_list_len                  # 列表  % 表示整除取余
    end_list.append(init_list[-n:]) if n!=0 else end_list  # 将没有被整除的部分加入 end_list (len(graph_JJ)=3411 不能被35整除 )
    return end_list

new_list=list_of_sentences(graph_JJ,50)   # run the function
print(new_list[-1])

string_data = []
for s in new_list:
    string = "".join(s)                   # 使用 "(anything that jion the list or nothing)".jion(X) 将list 转化为 string 
    string_data.append(string)
print(string_data[-1])

data = {'author':'RC','text': string_data}
df_graph_JJ = pd.DataFrame(data)
print(df_graph_JJ.head())

with open (r"C:\Users\wangtao\Desktop\graph_data_RC.csv",'w')as f:
    df_graph_JJ.to_csv(f)
  
#*args and *kwargs are mostly used in function definitions. 
#*args and *kwargs allow you to pass a variable number of arguments to a function. 
#What does variable mean here is that you do not know before hand that 
#how many arguments can be passed to your function by 
#the user so in this case you use these two keywords. 
#*args is used to send a non-keyworded variable length argument list to the function. 
#Here’s an example to help you get a clear idea: https://pythontips.com/2013/08/04/args-and-kwargs-in-python-explained/

#split list into sublists with lambda expression
list_of_sentence = lambda x,y: zip(*(iter(x),)*y)
end_list = [list(i) for i in list_of_sentence(graph_JJ,50)] 

## the group whose sentences is less than 50 is not included
## in python3 we should use list() to make the zip() into list 
## group_adjacent = lambda x, k: list(zip(*([iter(x)] * k)))

#test the data 
print(end_list[-1])
print(other_list[1:3])

##Split into groups of words
## for the suggestion I will splite the data into groups with 600 words per group
unit_JJ = []
for line in text_JJ:
    word = line.split()
    for w in word:
        unit_JJ.append(w)
print(unit_JJ[0:2]) 
#len(unit_JJ)
['My', 'husband']

def list_of_words(init_list,sub_list_len):
    list_of_word = list(zip(*(iter(init_list),)*sub_list_len))    # python3 need to use list() to list the content list(zip()) 
    end_list = [list(i) for i in list_of_word]
    n = len(init_list)% sub_list_len
    end_list.append(init_list[-n:]) if n!=0 else end_list
    return end_list

new_word_list = list_of_words(unit_JJ,600)
print(new_word_list[-1])

string_word_data = []
for s in new_word_list:
    string_word = " ".join(s)           # transfer list into string using ''.jion(). 
                                        # here jion with space " " cause it has been splited into words
    string_word_data.append(string_word)
print(string_word_data[-1])

word_data = {'author':'RC','text': string_word_data}
df_word_JJ = pd.DataFrame(word_data)
print(df_word_JJ.head())

#creat new file
with open (r"C:\Users\wangtao\Desktop\word_data_RC.csv",'w')as f: 
    df_word_JJ.to_csv(f)
